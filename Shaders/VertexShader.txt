#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec4 aColor;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;
out vec4 Color;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	FragPos = vec3(model * vec4(aPos, 1.0));
	Normal = mat3(transpose(inverse(model))) * aNormal;
	TexCoords = aTexCoords;
	Color = aColor;

	// GLSL uses column-major matrices. That is, if we've got such translation matrix:
	//
	// 1  0  0  x
	// 0  1  0  y
	// 0  0  1  z
	// 0  0  0  1
	//
	// in GLSL it'll be interpreted as follows:
	//
	// 1  0  0  0
	// 0  1  0  0
	// 0  0  1  0
	// x  y  z  1
	//
	// Hence, all the matrices should be transposed before being passed to shader.
	// (Reversed order below works too, but that's kind of not purely intuitive - vector with right-multiplied matrix)
	
	gl_Position = projection * view * vec4(FragPos, 1.0);	
}